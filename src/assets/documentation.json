{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "UniqueSelectionDispatcher",
            "id": "injectable-UniqueSelectionDispatcher-94fe971e6fd6a2529a76fdc0f4edcb8c",
            "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
            "properties": [
                {
                    "name": "_listeners",
                    "defaultValue": "[]",
                    "type": "UniqueSelectionDispatcherListener[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "listen",
                    "args": [
                        {
                            "name": "listener",
                            "type": "UniqueSelectionDispatcherListener"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "description": "<p>Listen for future changes to item selection.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "listener",
                            "type": "UniqueSelectionDispatcherListener",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 1395,
                                "end": 1401,
                                "flags": 0,
                                "escapedText": "return"
                            },
                            "comment": "<p>Function used to deregister listener</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "description": "<p>Notify other items that selection for the given name has been set.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1153,
                                "end": 1155,
                                "flags": 0,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1147,
                                "end": 1152,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>ID of the item.</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1184,
                                "end": 1188,
                                "flags": 0,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "tagName": {
                                "pos": 1178,
                                "end": 1183,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Name of the item.</p>\n"
                        }
                    ]
                }
            ],
            "description": "<p>Class to coordinate unique selection based on name.\nIntended to be consumed as an Angular service.\nThis service is needed because native radio change events are only fired on the item currently\nbeing selected, and we still need to uncheck the previous selection.</p>\n<p>This service does not <em>store</em> any IDs and names because they may change at any time, so it is\nless error-prone if they are simply passed through when the events occur.</p>\n",
            "sourceCode": "import {Injectable, OnDestroy} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\n@Injectable({providedIn: 'root'})\nexport class UniqueSelectionDispatcher implements OnDestroy {\n  private _listeners: UniqueSelectionDispatcherListener[] = [];\n\n  /**\n   * Notify other items that selection for the given name has been set.\n   * @param id ID of the item.\n   * @param name Name of the item.\n   */\n  notify(id: string, name: string) {\n    for (const listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n\n  /**\n   * Listen for future changes to item selection.\n   * @return Function used to deregister listener\n   */\n  listen(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\n\n  ngOnDestroy() {\n    this._listeners = [];\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "CheckboxChange",
            "id": "class-CheckboxChange-061d883b3f4d581a0a4d05a1d1a8bf78",
            "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
            "type": "class",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  /**\n   * Se la checkbox è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n    inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "source",
                    "type": "CheckboxComponent",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RadioChange",
            "id": "class-RadioChange-f3c9f47b372b86287f191401e6791bc4",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "type": "class",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  private id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "type": "RadioButtonComponent"
                    },
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "source",
                        "type": "RadioButtonComponent",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "source",
                    "type": "RadioButtonComponent",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "value",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ToggleChange",
            "id": "class-ToggleChange-96bbfccd611f40d2afe13f6321b42ce3",
            "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
            "type": "class",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "source",
                    "type": "ToggleComponent",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RadioGroupDirective",
            "id": "directive-RadioGroupDirective-f3c9f47b372b86287f191401e6791bc4",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  private id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "selector": "it-radio-group",
            "providers": [
                {
                    "name": "{\n    : , : (() => ), : true\n}"
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "description": "<p>Se il gruppo è disabled </p>\n",
                    "line": 121,
                    "type": "boolean"
                },
                {
                    "name": "name",
                    "description": "<p>Nome del gruppo di radio button. Tutti i radio button all&#39;interno del gruppo avranno questo nome. </p>\n",
                    "line": 86,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "description": "<p>Il radio button selezionato. </p>\n",
                    "line": 112
                },
                {
                    "name": "value",
                    "description": "<p>Valore del radio button. </p>\n",
                    "line": 94,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<RadioChange>()",
                    "description": "<p>Evento emesso quando il valore del gruppo cambia.\nGli eventi di change sono emessi soltanto quando il valore cambia a causa dell&#39;interazione dell&#39;utente\ncon il radio button (stesso comportamento di <code>&lt;input type-&quot;radio&quot;&gt;</code>).</p>\n",
                    "line": 74,
                    "type": "EventEmitter<RadioChange>"
                }
            ],
            "hostBindings": [
                {
                    "name": "attr.role",
                    "defaultValue": "'radiogroup'",
                    "line": 45
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "<p>Il metodo da chiamare per aggiornare ngModel </p>\n",
                    "line": 80
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Se il radio group è disabilitato. </p>\n",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_isInitialized",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>se <code>value</code> è stato settato al suo valore iniziale. </p>\n",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_name",
                    "defaultValue": "`it-radio-group-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "<p>L&#39;attributo HTML name da applicare ai radio button in questo gruppo </p>\n",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_radios",
                    "type": "QueryList<RadioButtonComponent>",
                    "optional": false,
                    "description": "<p>radio buttons figli. </p>\n",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ContentChildren"
                        }
                    ]
                },
                {
                    "name": "_selected",
                    "defaultValue": "null",
                    "type": "RadioButtonComponent | null",
                    "optional": false,
                    "description": "<p>Il radio button attualmente selezionato. </p>\n",
                    "line": 59,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n<em>esiste</em> un radio button con un valore corrispondente. Se <em>non esiste</em> un radio button corrispondente\nquesto valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\ncorrispondente.</p>\n",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methodsClass": [
                {
                    "name": "_checkSelectedRadioButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "description": "<p>Invia l&#39;evento change con la selezione corrente e il valore del gruppo. </p>\n"
                },
                {
                    "name": "_markRadiosForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171
                },
                {
                    "name": "_touch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139
                },
                {
                    "name": "_updateRadioButtonNames",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_updateSelectedRadioFromValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "description": "<p>Aggiorna il radio button <code>selected</code> a seconda del suo _value. </p>\n",
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "description": "<p>Inizializza le proprietà quando il contenuto dei figliè disponibile.\nQuesto permette di propagare gli attributi rilevanti ai radio buttons associati.</p>\n"
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterContentInit",
                "ControlValueAccessor"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 125,
                "jsdoctags": [
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "setSignature": {
                        "name": "name",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 87,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "newValue",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 95,
                        "jsdoctags": [
                            {
                                "name": "newValue",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "args": [
                            {
                                "name": "selected",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 113,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-061d883b3f4d581a0a4d05a1d1a8bf78",
            "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ : , : (() => ), : true }"
                }
            ],
            "selector": "it-checkbox",
            "styleUrls": [
                "checkbox.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "description": "<p>Se la checkbox è selezionata.</p>\n",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "description": "<p>Se la checkbox è disabilitata.</p>\n",
                    "line": 46,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>L&#39;etichetta della checkbox.</p>\n",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<CheckboxChange>()",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> della checkbox cambia.</p>\n",
                    "line": 58,
                    "type": "EventEmitter<CheckboxChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {}",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "inputId",
                    "defaultValue": "`checkbox-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-checkbox&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class CheckboxChange {\n  source: CheckboxComponent;\n  checked: boolean;\n}\n\n/**\n * Una checkbox con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-checkbox>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-checkbox',\n  templateUrl: './checkbox.component.html',\n  styleUrls: ['./checkbox.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n  /**\n   * Se la checkbox è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della checkbox.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la checkbox è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della checkbox cambia.\n   */\n  @Output() readonly change: EventEmitter<CheckboxChange> =\n    new EventEmitter<CheckboxChange>();\n\n    inputId = `checkbox-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new CheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=form-check>\n  <input type=checkbox\n    [id]=inputId\n    [checked]=checked\n    [disabled]=disabled\n    (change)=handleChange($event)>\n  <label\n    [attr.for]=inputId>{{label}}</label>\n</div>\n"
        },
        {
            "name": "RadioButtonComponent",
            "id": "component-RadioButtonComponent-f3c9f47b372b86287f191401e6791bc4",
            "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "exportAs": "itRadioButton",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "it-radio-button",
            "styleUrls": [
                "radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "description": "<p>se il radio button è checked. </p>\n",
                    "line": 215,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "description": "<p>Se il radio button è disabled. </p>\n",
                    "line": 253,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>L&#39;etichetta delradio button. </p>\n",
                    "line": 211,
                    "type": "string"
                },
                {
                    "name": "name",
                    "description": "<p>Attributo &#39;name&#39; usato per raggruppare i radio button per un&#39;unica selezione. </p>\n",
                    "line": 207,
                    "type": "string"
                },
                {
                    "name": "value",
                    "description": "<p>Il valore di questo radio button. </p>\n",
                    "line": 236,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<RadioChange>()",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> del radio button cambia.</p>\n",
                    "line": 267,
                    "type": "EventEmitter<RadioChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "<p>Se il radio button è checked. </p>\n",
                    "line": 273,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Se il radio button è disabled. </p>\n",
                    "line": 276,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_removeUniqueSelectionListener",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 281,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_value",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "<p>il valore assegnato al radio button. </p>\n",
                    "line": 279,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`radio-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 204,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "radioGroup",
                    "type": "RadioGroupDirective",
                    "optional": false,
                    "description": "<p>Il radio group padre. Può essere presente o meno. </p>\n",
                    "line": 270
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_markForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "description": "<p>Segna il radio button come da controllare per la change detection.</p>\n"
                },
                {
                    "name": "_onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 305
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\ned espone una API simile. Una <code>&lt;it-radio-button&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectorRef,\n  forwardRef,\n  ChangeDetectionStrategy,\n  AfterContentInit,\n  Directive,\n  ContentChildren,\n  QueryList,\n  OnInit,\n  OnDestroy,\n  Optional,\n  HostBinding\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { UniqueSelectionDispatcher } from './unique-selection-dispatcher';\n\nlet identifier = 0;\n\nfunction _coerceBooleanProperty(value: any): boolean {\n  return value != null && `${value}` !== 'false';\n}\n\nexport class RadioChange {\n  constructor(\n    public source: RadioButtonComponent,\n    public value: any\n  ) { }\n}\n\n@Directive({\n  selector: 'it-radio-group', // tslint:disable-line\n  exportAs: 'itRadioGroup',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioGroupDirective),\n    multi: true\n  }]\n})\nexport class RadioGroupDirective implements AfterContentInit, ControlValueAccessor {\n\n  @HostBinding('attr.role') role = 'radiogroup';\n\n  /**\n   * Il valore selezionato per il gruppo. Dovrebbe essere uguale al valore del radio button selezionato se\n   * *esiste* un radio button con un valore corrispondente. Se *non esiste* un radio button corrispondente\n   * questo valore persiste ed è applicato nel caso in cui un nuovo radio button viene aggiunto con il valore\n   * corrispondente.\n   */\n  private _value: any = null;\n\n  /** L'attributo HTML name da applicare ai radio button in questo gruppo */\n  private _name = `it-radio-group-${identifier++}`;\n\n  /** Il radio button attualmente selezionato. */\n  private _selected: RadioButtonComponent | null = null;\n\n  /** se `value` è stato settato al suo valore iniziale. */\n  private _isInitialized = false;\n\n  /** Se il radio group è disabilitato. */\n  private _disabled = false;\n\n\n\n  /**\n   * Evento emesso quando il valore del gruppo cambia.\n   * Gli eventi di change sono emessi soltanto quando il valore cambia a causa dell'interazione dell'utente\n   * con il radio button (stesso comportamento di `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** radio buttons figli. */\n  @ContentChildren(forwardRef(() => RadioButtonComponent), { descendants: true }) _radios: QueryList<RadioButtonComponent>; // tslint:disable-line\n\n  /** Il metodo da chiamare per aggiornare ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  onTouched: () => any = () => { };\n\n  /** Nome del gruppo di radio button. Tutti i radio button all'interno del gruppo avranno questo nome. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Valore del radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Il radio button selezionato. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: RadioButtonComponent | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Se il gruppo è disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = _coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Inizializza le proprietà quando il contenuto dei figliè disponibile.\n   * Questo permette di propagare gli attributi rilevanti ai radio buttons associati.\n   */\n  ngAfterContentInit(): void {\n    this._isInitialized = true;\n  }\n\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Aggiorna il radio button `selected` a seconda del suo _value. */\n  private _updateSelectedRadioFromValue(): void {\n    this._selected = null;\n    this._radios.forEach(radio => {\n      radio.checked = this.value === radio.value;\n      if (radio.checked) {\n        this._selected = radio;\n      }\n    });\n  }\n\n  /** Invia l'evento change con la selezione corrente e il valore del gruppo. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new RadioChange(this._selected, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  writeValue(value: any): void {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\n/**\n * Un radio button con design bootstrap italia. Supporta tutte le funzionalità di una radio HTML5,\n * ed espone una API simile. Una `<it-radio-button>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-radio-button',\n  templateUrl: './radio.component.html',\n  styleUrls: ['./radio.component.scss'],\n  exportAs: 'itRadioButton',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButtonComponent implements OnInit, OnDestroy {\n\n  private id = `radio-${identifier++}`;\n\n  /** Attributo 'name' usato per raggruppare i radio button per un'unica selezione. */\n  @Input() name: string;\n\n  /** L'etichetta delradio button. */\n  @Input()\n  label: string;\n\n  /** se il radio button è checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = _coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Il valore di questo radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Se il radio button è disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = !!value;\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /**\n   * Evento emesso quando il valore `checked` del radio button cambia.\n   */\n  @Output() readonly change: EventEmitter<RadioChange> = new EventEmitter<RadioChange>();\n\n  /** Il radio group padre. Può essere presente o meno. */\n  radioGroup: RadioGroupDirective;\n\n  /** Se il radio button è checked. */\n  private _checked = false;\n\n  /** Se il radio button è disabled. */\n  private _disabled: boolean;\n\n  /** il valore assegnato al radio button. */\n  private _value: any = null;\n\n  private _removeUniqueSelectionListener: () => void = () => { };\n\n  constructor(\n    @Optional() radioGroup: RadioGroupDirective,\n    private _changeDetector: ChangeDetectorRef,\n    private _radioDispatcher: UniqueSelectionDispatcher\n  ) {\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /**\n   * Segna il radio button come da controllare per la change detection.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit(): void {\n    if (this.radioGroup) {\n      // Se il radio button è all'interno di un gruppo, determina se deve essere selezionato\n      this.checked = this.radioGroup.value === this._value;\n      // Copia il `name` del radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngOnDestroy() {\n    this._removeUniqueSelectionListener();\n  }\n\n  private _emitChangeEvent(): void {\n    this.change.emit(new RadioChange(this, this._value));\n  }\n\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective"
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_radioDispatcher",
                        "type": "UniqueSelectionDispatcher"
                    }
                ],
                "line": 281,
                "jsdoctags": [
                    {
                        "name": "radioGroup",
                        "type": "RadioGroupDirective",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_changeDetector",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_radioDispatcher",
                        "type": "UniqueSelectionDispatcher",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 216,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "any"
                            }
                        ],
                        "returnType": "void",
                        "line": 237,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 256,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"form-check\">\n  <input type=\"radio\"\n    [id]=\"id\"\n    [checked]=\"checked\"\n    [disabled]=\"disabled\"\n    [attr.name]=\"name\"\n    (change)=\"_onInputChange($event)\">\n  <label\n    [attr.for]=\"id\">{{label}}</label>\n</div>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-96bbfccd611f40d2afe13f6321b42ce3",
            "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ : , : (() => ), : true }"
                }
            ],
            "selector": "it-toggle",
            "styleUrls": [
                "toggle.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "description": "<p>Se la toggle è selezionata.</p>\n",
                    "line": 27,
                    "type": "boolean"
                },
                {
                    "name": "disabled",
                    "description": "<p>Se la toggle è disabilitata.</p>\n",
                    "line": 46,
                    "type": "boolean"
                },
                {
                    "name": "label",
                    "description": "<p>L&#39;etichetta della toggle.</p>\n",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "change",
                    "defaultValue": "new EventEmitter<ToggleChange>()",
                    "description": "<p>Evento emesso quando il valore <code>checked</code> della toggle cambia.</p>\n",
                    "line": 58,
                    "type": "EventEmitter<ToggleChange>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_checked",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_controlValueAccessorChangeFn",
                    "defaultValue": "() => { }",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_onTouched",
                    "defaultValue": "() => {}",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "inputId",
                    "defaultValue": "`toggle-${identifier++}`",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "_emitChangeEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\ned espone una API simile. Una <code>&lt;it-toggle&gt;</code> può essere checked, unchecked, o disabled.</p>\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectorRef, forwardRef, ChangeDetectionStrategy } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\nlet identifier = 0;\n\nexport class ToggleChange {\n  source: ToggleComponent;\n  checked: boolean;\n}\n\n/**\n * Una toggle con design bootstrap italia. Supporta tutte le funzionalità di una checkbox HTML5,\n * ed espone una API simile. Una `<it-toggle>` può essere checked, unchecked, o disabled.\n */\n@Component({\n  selector: 'it-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.css'],\n  providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleComponent), multi: true }],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ToggleComponent implements ControlValueAccessor {\n  /**\n   * Se la toggle è selezionata.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value !== this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked = false;\n\n  /**\n   * L'etichetta della toggle.\n   */\n  @Input()\n  label: string;\n\n  /**\n   * Se la toggle è disabilitata.\n   */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    if (value !== this.disabled) {\n      this._disabled = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled = false;\n\n  /**\n   * Evento emesso quando il valore `checked` della toggle cambia.\n   */\n  @Output() readonly change: EventEmitter<ToggleChange> =\n    new EventEmitter<ToggleChange>();\n\n    inputId = `toggle-${identifier++}`;\n\n  private _onTouched: () => any = () => {};\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => { };\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  handleChange(event: Event) {\n    event.stopPropagation();\n    if (!this.disabled) {\n      this._toggle();\n      this._emitChangeEvent();\n    }\n  }\n\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  private _emitChangeEvent() {\n    const event = new ToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "_changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "checked": {
                    "name": "checked",
                    "setSignature": {
                        "name": "checked",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 28,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 47,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"form-check\">\n  <div class=\"toggles\">\n    <label [attr.for]=inputId>\n      {{label}}\n      <input type=checkbox\n        [id]=inputId\n        [checked]=checked\n        [disabled]=disabled\n        (change)=handleChange($event)>\n      <span class=\"lever\"></span>\n    </label>\n  </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "DesignAngularKitModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "RadioButtonComponent"
                        },
                        {
                            "name": "RadioGroupDirective"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "identifier",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "number",
                "defaultValue": "0"
            }
        ],
        "functions": [
            {
                "name": "_coerceBooleanProperty",
                "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "UniqueSelectionDispatcherListener",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                "description": "",
                "kind": 162
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/radio/radio.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/design-angular-kit/src/lib/toggle/toggle.component.ts": [
                {
                    "name": "identifier",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ]
        },
        "groupedFunctions": {
            "projects/design-angular-kit/src/lib/radio/radio.component.ts": [
                {
                    "name": "_coerceBooleanProperty",
                    "file": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts": [
                {
                    "name": "UniqueSelectionDispatcherListener",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                    "description": "",
                    "kind": 162
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 19,
        "status": "low",
        "files": [
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckboxChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/checkbox/checkbox.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioButtonComponent",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RadioGroupDirective",
                "coveragePercent": 57,
                "coverageCount": "15/26",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RadioChange",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "_coerceBooleanProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/radio.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/radio/unique-selection-dispatcher.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UniqueSelectionDispatcher",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 29,
                "coverageCount": "5/17",
                "status": "medium"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleChange",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/design-angular-kit/src/lib/toggle/toggle.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "identifier",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}